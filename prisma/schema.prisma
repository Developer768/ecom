// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    email    String @unique
    password String
    avatar   String @default("/assets/images/avatar.png")
}

model ProductCategory {
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    category_name   String @unique
    slug            String @unique
    description     String
    metaTitle       String
    metaDescription String
    products products[]
}

model blogCategory {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    category_name   String      @unique
    slug            String      @unique
    description     String
    metaTitle       String
    metaDescription String
    posts           blogPosts[]
}

model blogTags {
    id     String      @id @default(auto()) @map("_id") @db.ObjectId
    name   String      @unique
    desc   String
    // postId String[]    @db.ObjectId
    // posts  blogPosts[] @relation(fields: [postId], references: [id])
}

model blogPosts {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    image String
    title           String       @unique
    slug            String       @unique
    summary         String
    content         String
    metaTitle       String
    metaDescription String
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    categoryId      String       @db.ObjectId
    category        blogCategory @relation(fields: [categoryId], references: [id])
    tags String[]
    // tagId           String[]     @db.ObjectId
    // tags            blogTags[]   @relation(fields: [tagId], references: [id])
}


model products {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    images String[]
    name String
    slug String
    desc String
    details String
    discount        String
    metaTitle       String
    metaDescription String
    variants Json[] 
    combination Json[]
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    categoryId      String       @db.ObjectId
    category        ProductCategory @relation(fields: [categoryId], references: [id])
    tags String[]
}


model States {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  counties Counties[]
}

model Counties {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  orderPrice String
  shippingCost String
  state   States @relation(fields: [StateId], references: [id])
  StateId String @db.ObjectId
}


model orders {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    firstName String
    lastName String
    State String
    County String
    shippingAddress String
    phoneNumber String
    products Json[]
    // subTotal String
    totalPrice String
    // shippingFee String
    deliveryStatus String @default("pending")
    // paymentStatus String 
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
}